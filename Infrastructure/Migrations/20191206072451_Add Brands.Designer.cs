// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20191206072451_Add Brands")]
    partial class AddBrands
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.Models.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<int>("EntityStatus");

                    b.Property<DateTime>("LastUpdated");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("Core.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<int>("EntityStatus");

                    b.Property<DateTime>("LastUpdated");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Core.Models.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("EntityStatus");

                    b.Property<string>("FirstName");

                    b.Property<string>("IdNumber");

                    b.Property<string>("LastName");

                    b.Property<DateTime>("LastUpdated");

                    b.Property<string>("MiddleName");

                    b.Property<string>("PhoneNumber");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Core.Models.Factory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("EntityStatus");

                    b.Property<DateTime>("LastUpdated");

                    b.Property<string>("Name");

                    b.Property<Guid>("RegionId");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Factories");
                });

            modelBuilder.Entity("Core.Models.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<int>("EntityStatus");

                    b.Property<Guid>("FactoryId");

                    b.Property<int>("GroupType");

                    b.Property<DateTime>("LastUpdated");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("FactoryId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Core.Models.GroupContact", b =>
                {
                    b.Property<Guid>("GroupId");

                    b.Property<Guid>("ContactId");

                    b.HasKey("GroupId", "ContactId");

                    b.HasIndex("ContactId");

                    b.ToTable("GroupContacts");
                });

            modelBuilder.Entity("Core.Models.Packaging", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<int>("EntityStatus");

                    b.Property<DateTime>("LastUpdated");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Packagings");
                });

            modelBuilder.Entity("Core.Models.PackagingType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<int>("EntityStatus");

                    b.Property<DateTime>("LastUpdated");

                    b.Property<string>("Name");

                    b.Property<Guid>("PackagingId");

                    b.HasKey("Id");

                    b.HasIndex("PackagingId");

                    b.ToTable("PackagingType");
                });

            modelBuilder.Entity("Core.Models.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<int>("EntityStatus");

                    b.Property<DateTime>("LastUpdated");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Core.Models.Setting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("ConnectionString");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("EntityStatus");

                    b.Property<Guid>("FactoryId");

                    b.Property<string>("KeyWord");

                    b.Property<DateTime>("LastUpdated");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<string>("SenderId");

                    b.Property<string>("ShortCode");

                    b.Property<bool>("SmsRequireApproval");

                    b.Property<string>("SmsUrl");

                    b.Property<string>("SubscriptionKeyWord");

                    b.Property<string>("Title");

                    b.Property<string>("UnSubscriptionKeyWord");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.HasIndex("FactoryId")
                        .IsUnique();

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Core.Models.Sms", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BillingType");

                    b.Property<string>("Code");

                    b.Property<Guid>("ContactId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("EntityStatus");

                    b.Property<DateTime>("LastUpdated");

                    b.Property<string>("Message");

                    b.Property<string>("MessageId");

                    b.Property<int>("MessageType");

                    b.Property<int>("SmsCategory");

                    b.Property<int>("SmsStatus");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("Sms");
                });

            modelBuilder.Entity("Core.Models.SubBrand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BrandId");

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<int>("EntityStatus");

                    b.Property<DateTime>("LastUpdated");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("SubBrand");
                });

            modelBuilder.Entity("Core.Models.SubCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CategoryId");

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<int>("EntityStatus");

                    b.Property<DateTime>("LastUpdated");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategory");
                });

            modelBuilder.Entity("Core.Models.Tier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<int>("EntityStatus");

                    b.Property<DateTime>("LastUpdated");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Tiers");
                });

            modelBuilder.Entity("Core.Models.UnitOfMeasure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<int>("EntityStatus");

                    b.Property<DateTime>("LastUpdated");

                    b.Property<string>("Name");

                    b.Property<Guid>("UnitOfMeasureTypeId");

                    b.HasKey("Id");

                    b.HasIndex("UnitOfMeasureTypeId");

                    b.ToTable("UnitOfMeasures");
                });

            modelBuilder.Entity("Core.Models.UnitOfMeasureType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<int>("EntityStatus");

                    b.Property<DateTime>("LastUpdated");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("UnitOfMeasureTypes");
                });

            modelBuilder.Entity("Core.Models.Vat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime>("EffectiveDate");

                    b.Property<DateTime>("EndDate");

                    b.Property<int>("EntityStatus");

                    b.Property<DateTime>("LastUpdated");

                    b.Property<decimal>("Rate");

                    b.Property<Guid>("VatCategoryId");

                    b.HasKey("Id");

                    b.HasIndex("VatCategoryId");

                    b.ToTable("Vats");
                });

            modelBuilder.Entity("Core.Models.VatCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<int>("EntityStatus");

                    b.Property<DateTime>("LastUpdated");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("VatCategory");
                });

            modelBuilder.Entity("Core.Models.Factory", b =>
                {
                    b.HasOne("Core.Models.Region", "Region")
                        .WithMany("Factories")
                        .HasForeignKey("RegionId");
                });

            modelBuilder.Entity("Core.Models.Group", b =>
                {
                    b.HasOne("Core.Models.Factory", "Factory")
                        .WithMany("Groups")
                        .HasForeignKey("FactoryId");
                });

            modelBuilder.Entity("Core.Models.GroupContact", b =>
                {
                    b.HasOne("Core.Models.Contact", "Contact")
                        .WithMany("GroupContacts")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Models.Group", "Group")
                        .WithMany("GroupContacts")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Models.PackagingType", b =>
                {
                    b.HasOne("Core.Models.Packaging", "Packaging")
                        .WithMany("PackagingTypes")
                        .HasForeignKey("PackagingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Models.Setting", b =>
                {
                    b.HasOne("Core.Models.Factory", "Factory")
                        .WithOne("FactorySetting")
                        .HasForeignKey("Core.Models.Setting", "FactoryId");
                });

            modelBuilder.Entity("Core.Models.Sms", b =>
                {
                    b.HasOne("Core.Models.Contact", "Contact")
                        .WithMany("Sms")
                        .HasForeignKey("ContactId");
                });

            modelBuilder.Entity("Core.Models.SubBrand", b =>
                {
                    b.HasOne("Core.Models.Brand", "Brand")
                        .WithMany("SubBrands")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Models.SubCategory", b =>
                {
                    b.HasOne("Core.Models.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Models.UnitOfMeasure", b =>
                {
                    b.HasOne("Core.Models.UnitOfMeasureType", "UnitOfMeasureType")
                        .WithMany("UnitOfMeasures")
                        .HasForeignKey("UnitOfMeasureTypeId");
                });

            modelBuilder.Entity("Core.Models.Vat", b =>
                {
                    b.HasOne("Core.Models.VatCategory", "VatCategory")
                        .WithMany("Vats")
                        .HasForeignKey("VatCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
